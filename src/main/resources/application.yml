spring:
  application:
    name: java-ai-agents
  jackson:
    default-property-inclusion: non_null
    serialization:
      indent-output: true
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:java_ai_agents}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=10000,expireAfterWrite=10m

server:
  port: 9001

openai:
  api-key: ${OPENAI_API_KEY:}
  text-model: ${OPENAI_TEXT_MODEL:gpt-4o}
  image-model: ${OPENAI_IMAGE_MODEL:dall-e-3}
  timeout-ms: ${OPENAI_TIMEOUT_MS:30000}
  image-timeout-ms: ${OPENAI_IMAGE_TIMEOUT_MS:120000}
  temperature: 0.1
  max-tokens: 2000

images:
  download-enabled: ${IMAGES_DOWNLOAD_ENABLED:true}
  local-storage-path: ${IMAGES_STORAGE_PATH:./generated-images}
  keep-remote-url: ${IMAGES_KEEP_REMOTE_URL:false}
  base-url: ${IMAGES_BASE_URL:http://localhost:8080}

serpapi:
  api-key: ${SERPAPI_KEY:}
  search-engine: ${SERPAPI_ENGINE:google}
  location: ${SERPAPI_LOCATION:United States}
  max-results: ${SERPAPI_MAX_RESULTS:5}
  enabled: ${SERPAPI_ENABLED:true}

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:}
  access-token-expiry-minutes: ${JWT_ACCESS_TOKEN_EXPIRY_MINUTES:30}
  refresh-token-expiry-days: ${JWT_REFRESH_TOKEN_EXPIRY_DAYS:7}

# CORS Configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3001,http://localhost:8080,http://localhost:3000}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
  allowed-headers: ${CORS_ALLOWED_HEADERS:Authorization,Content-Type,Accept}
  allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
  max-age: ${CORS_MAX_AGE:3600}

# OAuth Configuration
oauth:
  frontend-success-url: ${OAUTH_FRONTEND_URL:http://localhost:3000}/settings/connections
  encryption:
    key: ${OAUTH_ENCRYPTION_KEY:}  # Base64 encoded 256-bit key
  token-refresh:
    days-before-expiry: ${OAUTH_TOKEN_REFRESH_DAYS:5}  # Refresh tokens N days before expiry
    scheduled:
      enabled: ${OAUTH_TOKEN_REFRESH_SCHEDULED_ENABLED:true}  # Enable/disable scheduled refresh
      cron: ${OAUTH_TOKEN_REFRESH_CRON:0 0 2 * * *}  # Daily at 2 AM by default
  providers:
    linkedin:
      client-id: ${LINKEDIN_CLIENT_ID:}
      client-secret: ${LINKEDIN_CLIENT_SECRET:}
    facebook:
      client-id: ${FACEBOOK_CLIENT_ID:}
      client-secret: ${FACEBOOK_CLIENT_SECRET:}
    twitter:
      client-id: ${TWITTER_CLIENT_ID:}
      client-secret: ${TWITTER_CLIENT_SECRET:}

logging:
  level:
    za.co.digitalcowboy.agents: DEBUG
    dev.langchain4j: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always