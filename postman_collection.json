{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "Java AI Agents API - Async",
    "description": "Complete test collection for Java AI Agents System with OpenAI integration and async processing. This collection includes all async endpoints for generating AI-powered content with research, platform-specific formatting, and image generation.\n\n**Key Features:**\n- Async generation with immediate task ID response\n- Status polling for progress tracking\n- Result retrieval when complete\n- Local image download with HTTP URLs\n- Configurable base URL for deployment flexibility",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Async Content Generation",
      "item": [
        {
          "name": "Start Twitter Professional Generation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Artificial Intelligence\",\n  \"platform\": \"twitter\",\n  \"tone\": \"professional\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Start async generation for Twitter content with professional tone. Returns task ID immediately (~50ms)."
          },
          "response": []
        },
        {
          "name": "Start LinkedIn Professional Generation", 
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Remote Work Trends\",\n  \"platform\": \"linkedin\",\n  \"tone\": \"professional\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Start async generation for LinkedIn content with 3-5 paragraphs and business CTA."
          },
          "response": []
        },
        {
          "name": "Start Instagram Casual Generation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Healthy Lifestyle Tips\",\n  \"platform\": \"instagram\",\n  \"tone\": \"casual\",\n  \"imageCount\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Start async generation for Instagram caption with hashtags and multiple images."
          },
          "response": []
        },
        {
          "name": "Start Blog Authoritative Generation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Machine Learning in Healthcare\",\n  \"platform\": \"blog\",\n  \"tone\": \"authoritative\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Start async generation for blog post with 300-500 words and structured content."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Task Management",
      "item": [
        {
          "name": "Get Task Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/status/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "status", "{{taskId}}"]
            },
            "description": "Check the status of a generation task. Status can be PENDING, IN_PROGRESS, COMPLETED, or FAILED."
          },
          "response": []
        },
        {
          "name": "Get Task Result",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/result/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "result", "{{taskId}}"]
            },
            "description": "Retrieve the completed result for a task. Only works when task status is COMPLETED."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Complete Async Workflow Examples",
      "item": [
        {
          "name": "1. Start Generation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 202) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('taskId', jsonData.taskId);",
                  "    console.log('Task ID saved:', jsonData.taskId);",
                  "    ",
                  "    pm.test('Task started successfully', function () {",
                  "        pm.expect(jsonData.taskId).to.be.a('string');",
                  "        pm.expect(jsonData.status).to.eql('PENDING');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"{{testTopic}}\",\n  \"platform\": \"{{testPlatform}}\",\n  \"tone\": \"{{testTone}}\",\n  \"imageCount\": {{testImageCount}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Step 1: Start generation and save task ID to environment variable"
          },
          "response": []
        },
        {
          "name": "2. Poll Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    console.log('Task status:', jsonData.status);",
                  "    ",
                  "    pm.test('Task exists', function () {",
                  "        pm.expect(jsonData.id).to.be.a('string');",
                  "        pm.expect(jsonData.status).to.be.oneOf(['PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED']);",
                  "    });",
                  "    ",
                  "    if (jsonData.status === 'COMPLETED') {",
                  "        console.log('Task completed! Ready to get result.');",
                  "    } else if (jsonData.status === 'FAILED') {",
                  "        console.log('Task failed:', jsonData.error);",
                  "    } else {",
                  "        console.log('Task still processing. Check again in a few seconds.');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/status/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "status", "{{taskId}}"]
            },
            "description": "Step 2: Poll task status (repeat until COMPLETED)"
          },
          "response": []
        },
        {
          "name": "3. Get Result",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.test('Result has all components', function () {",
                  "        pm.expect(jsonData).to.have.property('topic');",
                  "        pm.expect(jsonData).to.have.property('research');",
                  "        pm.expect(jsonData).to.have.property('content');",
                  "        pm.expect(jsonData).to.have.property('image');",
                  "    });",
                  "    ",
                  "    pm.test('Image has local URLs', function () {",
                  "        if (jsonData.image.localImageUrls.length > 0) {",
                  "            const url = jsonData.image.localImageUrls[0];",
                  "            pm.expect(url).to.include('/generated-image/');",
                  "        }",
                  "    });",
                  "    ",
                  "    console.log('Generation complete!');",
                  "    console.log('Topic:', jsonData.topic);",
                  "    console.log('Platform:', jsonData.content.platform);",
                  "    console.log('Research points:', jsonData.research.points.length);",
                  "    console.log('Local image URLs:', jsonData.image.localImageUrls.length);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/result/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "result", "{{taskId}}"]
            },
            "description": "Step 3: Get the completed result with all content and images"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Image Access",
      "item": [
        {
          "name": "Access Generated Image",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/generated-image/{{imageFilename}}",
              "host": ["{{baseUrl}}"],
              "path": ["generated-image", "{{imageFilename}}"]
            },
            "description": "Access a generated image directly via HTTP. Set imageFilename environment variable to test."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Validation Tests",
      "item": [
        {
          "name": "Invalid Platform",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Test Topic\",\n  \"platform\": \"facebook\",\n  \"tone\": \"professional\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Should return 400 - platform must be twitter, linkedin, instagram, or blog."
          },
          "response": []
        },
        {
          "name": "Invalid Tone",
          "request": {
            "method": "POST", 
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Test Topic\",\n  \"platform\": \"twitter\",\n  \"tone\": \"aggressive\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Should return 400 - tone must be professional, casual, friendly, authoritative, or technical."
          },
          "response": []
        },
        {
          "name": "Missing Topic",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"platform\": \"twitter\",\n  \"tone\": \"professional\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Should return 400 - topic is required."
          },
          "response": []
        },
        {
          "name": "Invalid Image Count",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Test Topic\",\n  \"platform\": \"twitter\",\n  \"tone\": \"professional\",\n  \"imageCount\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Should return 400 - image count must be 0-4."
          },
          "response": []
        },
        {
          "name": "Non-existent Task",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/status/non-existent-task-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "status", "non-existent-task-id"]
            },
            "description": "Should return 404 for non-existent task ID."
          },
          "response": []
        },
        {
          "name": "Get Result Before Completion",
          "request": {
            "method": "GET", 
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/result/{{pendingTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "result", "{{pendingTaskId}}"]
            },
            "description": "Should return 400 when trying to get result for non-completed task."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Health & Monitoring",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "health"]
            },
            "description": "Check service health status with active and total task counts."
          },
          "response": []
        },
        {
          "name": "Actuator Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health"]
            },
            "description": "Spring Boot Actuator health endpoint with detailed status."
          },
          "response": []
        },
        {
          "name": "Actuator Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "metrics"]
            },
            "description": "List all available metrics including agent timing."
          },
          "response": []
        },
        {
          "name": "Orchestration Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/metrics/orchestration.duration",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "metrics", "orchestration.duration"]
            },
            "description": "Get total orchestration timing metrics."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Load Testing",
      "item": [
        {
          "name": "Concurrent Generation Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Load Test {{$randomInt}}\",\n  \"platform\": \"twitter\",\n  \"tone\": \"professional\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Test concurrent requests with random topics. Use Postman Runner for load testing."
          },
          "response": []
        },
        {
          "name": "No Images Speed Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Quick Test\",\n  \"platform\": \"twitter\",\n  \"tone\": \"casual\",\n  \"imageCount\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Fast test without image generation for performance baseline."
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script to log request details",
          "console.log('🚀 Request URL:', pm.request.url.toString());",
          "console.log('📋 Request Method:', pm.request.method);",
          "if (pm.request.body && pm.request.body.raw) {",
          "    console.log('📦 Request Body:', pm.request.body.raw);",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common tests for all requests",
          "const responseTime = pm.response.responseTime;",
          "console.log('⏱️ Response time:', responseTime + 'ms');",
          "",
          "// Performance test based on endpoint type",
          "if (pm.request.url.path.includes('async')) {",
          "    pm.test('Async response time < 500ms', function () {",
          "        pm.expect(responseTime).to.be.below(500);",
          "    });",
          "} else if (pm.request.url.path.includes('status') || pm.request.url.path.includes('result')) {",
          "    pm.test('Status/Result response time < 200ms', function () {",
          "        pm.expect(responseTime).to.be.below(200);",
          "    });",
          "} else {",
          "    pm.test('General response time < 5s', function () {",
          "        pm.expect(responseTime).to.be.below(5000);",
          "    });",
          "}",
          "",
          "// Test for successful async start responses (202)",
          "if (pm.response.code === 202) {",
          "    pm.test('Async task started successfully', function () {",
          "        pm.response.to.have.status(202);",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('taskId');",
          "        pm.expect(jsonData).to.have.property('status');",
          "        pm.expect(jsonData.status).to.eql('PENDING');",
          "        pm.expect(jsonData).to.have.property('statusUrl');",
          "        pm.expect(jsonData).to.have.property('resultUrl');",
          "    });",
          "}",
          "",
          "// Test for successful status responses (200)",
          "if (pm.response.code === 200) {",
          "    pm.test('Status code is 200', function () {",
          "        pm.response.to.have.status(200);",
          "    });",
          "    ",
          "    pm.test('Response has valid JSON', function () {",
          "        pm.response.to.be.json;",
          "    });",
          "    ",
          "    // For status endpoints",
          "    if (pm.request.url.path.includes('status')) {",
          "        const jsonData = pm.response.json();",
          "        ",
          "        pm.test('Status response has required fields', function () {",
          "            pm.expect(jsonData).to.have.property('id');",
          "            pm.expect(jsonData).to.have.property('status');",
          "            pm.expect(jsonData).to.have.property('createdAt');",
          "            pm.expect(jsonData).to.have.property('updatedAt');",
          "        });",
          "        ",
          "        pm.test('Status is valid', function () {",
          "            pm.expect(jsonData.status).to.be.oneOf(['PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED']);",
          "        });",
          "    }",
          "    ",
          "    // For result endpoints",
          "    if (pm.request.url.path.includes('result') && !pm.request.url.path.includes('status')) {",
          "        const jsonData = pm.response.json();",
          "        ",
          "        pm.test('Result has all components', function () {",
          "            pm.expect(jsonData).to.have.property('topic');",
          "            pm.expect(jsonData).to.have.property('research');",
          "            pm.expect(jsonData).to.have.property('content');",
          "            pm.expect(jsonData).to.have.property('image');",
          "        });",
          "        ",
          "        pm.test('Research has required fields', function () {",
          "            pm.expect(jsonData.research).to.have.property('points');",
          "            pm.expect(jsonData.research.points).to.be.an('array');",
          "        });",
          "        ",
          "        pm.test('Content has required fields', function () {",
          "            pm.expect(jsonData.content).to.have.property('platform');",
          "            pm.expect(jsonData.content).to.have.property('tone');",
          "            pm.expect(jsonData.content).to.have.property('body');",
          "        });",
          "        ",
          "        pm.test('Image has all URL types', function () {",
          "            pm.expect(jsonData.image).to.have.property('openAiImageUrls');",
          "            pm.expect(jsonData.image).to.have.property('localImagePaths');",
          "            pm.expect(jsonData.image).to.have.property('localImageUrls');",
          "        });",
          "    }",
          "    ",
          "    // For health endpoints",
          "    if (pm.request.url.path.includes('health')) {",
          "        const jsonData = pm.response.json();",
          "        ",
          "        pm.test('Health response structure', function () {",
          "            pm.expect(jsonData).to.have.property('status');",
          "            pm.expect(jsonData).to.have.property('timestamp');",
          "        });",
          "    }",
          "}",
          "",
          "// Test for validation errors (400)",
          "if (pm.response.code === 400) {",
          "    pm.test('Validation error response structure', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('message');",
          "        pm.expect(jsonData).to.have.property('status');",
          "        pm.expect(jsonData.status).to.eql(400);",
          "    });",
          "}",
          "",
          "// Test for not found errors (404)",
          "if (pm.response.code === 404) {",
          "    pm.test('Not found error response', function () {",
          "        pm.response.to.have.status(404);",
          "    });",
          "}",
          "",
          "// Log response status",
          "console.log('✅ Response status:', pm.response.code, pm.response.status);"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{AGENTS_BASE_URL}}",
      "type": "string",
      "description": "Base URL for the agents API (set via environment)"
    },
    {
      "key": "taskId", 
      "value": "",
      "type": "string",
      "description": "Current task ID (auto-populated by workflow tests)"
    },
    {
      "key": "pendingTaskId",
      "value": "",
      "type": "string", 
      "description": "Task ID that's still pending (for testing error scenarios)"
    },
    {
      "key": "imageFilename",
      "value": "20241204_143025_test_topic_abc12345.png",
      "type": "string",
      "description": "Example image filename for testing image access"
    },
    {
      "key": "testTopic",
      "value": "{{AGENTS_TEST_TOPIC}}",
      "type": "string",
      "description": "Test topic for generation (set via environment)"
    },
    {
      "key": "testPlatform",
      "value": "{{AGENTS_TEST_PLATFORM}}",
      "type": "string",
      "description": "Test platform (set via environment)"
    },
    {
      "key": "testTone",
      "value": "{{AGENTS_TEST_TONE}}",
      "type": "string",
      "description": "Test tone (set via environment)"
    },
    {
      "key": "testImageCount",
      "value": "{{AGENTS_TEST_IMAGE_COUNT}}",
      "type": "string",
      "description": "Test image count (set via environment)"
    }
  ]
}