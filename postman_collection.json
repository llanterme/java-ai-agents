{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "Java AI Agents API - Complete with Auth",
    "description": "Complete test collection for Java AI Agents System with JWT Authentication, OpenAI integration, and async processing.\n\n**Authentication Flow:**\n1. Register a new user or login with existing credentials\n2. Access token is automatically saved and used for all protected endpoints\n3. Refresh token when needed\n\n**Key Features:**\n- JWT-based authentication with automatic token management\n- User registration and login\n- Token refresh mechanism\n- Protected content generation endpoints\n- Async generation with task tracking\n- Real-time web search integration\n- Local image download with HTTP URLs",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register New User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    // Save tokens to environment",
                  "    pm.environment.set('accessToken', jsonData.accessToken);",
                  "    pm.environment.set('refreshToken', jsonData.refreshToken);",
                  "    pm.environment.set('tokenExpiresIn', jsonData.expiresIn);",
                  "    ",
                  "    console.log('‚úÖ User registered successfully!');",
                  "    console.log('üîë Access token saved to environment');",
                  "    console.log('üîÑ Refresh token saved to environment');",
                  "    console.log('‚è±Ô∏è Token expires in:', jsonData.expiresIn, 'seconds');",
                  "    ",
                  "    pm.test('Registration successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('accessToken');",
                  "        pm.expect(jsonData).to.have.property('refreshToken');",
                  "        pm.expect(jsonData).to.have.property('expiresIn');",
                  "    });",
                  "} else if (pm.response.code === 400) {",
                  "    const jsonData = pm.response.json();",
                  "    console.log('‚ùå Registration failed:', jsonData.message);",
                  "    ",
                  "    pm.test('Registration validation', function () {",
                  "        pm.response.to.have.status(400);",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate random email for testing",
                  "const randomEmail = `test_${Date.now()}@example.com`;",
                  "pm.environment.set('testEmail', randomEmail);",
                  "pm.environment.set('testPassword', 'SecurePass123!');",
                  "",
                  "console.log('üìß Registering with email:', randomEmail);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"name\": \"Test\",\n  \"surname\": \"User\",\n  \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Register a new user account. Automatically saves the access and refresh tokens to environment variables for use in subsequent requests."
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    // Save tokens to environment",
                  "    pm.environment.set('accessToken', jsonData.accessToken);",
                  "    pm.environment.set('refreshToken', jsonData.refreshToken);",
                  "    pm.environment.set('tokenExpiresIn', jsonData.expiresIn);",
                  "    ",
                  "    console.log('‚úÖ Login successful!');",
                  "    console.log('üîë Access token saved to environment');",
                  "    console.log('üîÑ Refresh token saved to environment');",
                  "    console.log('‚è±Ô∏è Token expires in:', jsonData.expiresIn, 'seconds');",
                  "    ",
                  "    pm.test('Login successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('accessToken');",
                  "        pm.expect(jsonData).to.have.property('refreshToken');",
                  "        pm.expect(jsonData).to.have.property('expiresIn');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    const jsonData = pm.response.json();",
                  "    console.log('‚ùå Login failed:', jsonData.message);",
                  "    ",
                  "    pm.test('Invalid credentials', function () {",
                  "        pm.response.to.have.status(401);",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Login with existing credentials. Automatically saves the access and refresh tokens to environment variables."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    // Update tokens in environment",
                  "    pm.environment.set('accessToken', jsonData.accessToken);",
                  "    pm.environment.set('refreshToken', jsonData.refreshToken);",
                  "    pm.environment.set('tokenExpiresIn', jsonData.expiresIn);",
                  "    ",
                  "    console.log('‚úÖ Token refreshed successfully!');",
                  "    console.log('üîë New access token saved');",
                  "    console.log('üîÑ New refresh token saved');",
                  "    ",
                  "    pm.test('Token refresh successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('accessToken');",
                  "        pm.expect(jsonData).to.have.property('refreshToken');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    console.log('‚ùå Token refresh failed - please login again');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{refreshToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "refresh"]
            },
            "description": "Refresh the access token using the refresh token. Automatically updates both tokens in environment."
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    console.log('üë§ Current user:');",
                  "    console.log('  ID:', jsonData.id);",
                  "    console.log('  Email:', jsonData.email);",
                  "    console.log('  Name:', jsonData.name, jsonData.surname);",
                  "    console.log('  Roles:', jsonData.roles);",
                  "    console.log('  Active:', jsonData.active);",
                  "    ",
                  "    pm.test('User profile retrieved', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData).to.have.property('email');",
                  "        pm.expect(jsonData).to.have.property('roles');",
                  "        pm.expect(jsonData.roles).to.be.an('array');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    console.log('‚ùå Unauthorized - please login first');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "me"]
            },
            "description": "Get the current authenticated user's profile. Requires valid access token."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Content Generation (Protected)",
      "item": [
        {
          "name": "Generate Twitter Content",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    console.log('‚úÖ Content generated successfully!');",
                  "    console.log('üìù Platform:', jsonData.content.platform);",
                  "    console.log('üéØ Research points:', jsonData.research.points.length);",
                  "    console.log('üñºÔ∏è Images generated:', jsonData.image.localImageUrls.length);",
                  "    ",
                  "    pm.test('Content generation successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('research');",
                  "        pm.expect(jsonData).to.have.property('content');",
                  "        pm.expect(jsonData).to.have.property('image');",
                  "    });",
                  "    ",
                  "    pm.test('Twitter content constraints', function () {",
                  "        pm.expect(jsonData.content.body.length).to.be.below(281);",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    console.log('‚ùå Unauthorized - access token may be expired');",
                  "    console.log('üí° Try refreshing your token or login again');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Artificial Intelligence\",\n  \"platform\": \"twitter\",\n  \"tone\": \"professional\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate"]
            },
            "description": "Generate Twitter content (synchronous). Requires authentication. Takes 20+ seconds to complete."
          },
          "response": []
        },
        {
          "name": "Generate LinkedIn Content",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Remote Work Trends\",\n  \"platform\": \"linkedin\",\n  \"tone\": \"professional\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate"]
            },
            "description": "Generate LinkedIn content with 3-5 paragraphs. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Generate Instagram Content",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Healthy Lifestyle Tips\",\n  \"platform\": \"instagram\",\n  \"tone\": \"casual\",\n  \"imageCount\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate"]
            },
            "description": "Generate Instagram caption with hashtags. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Generate Blog Content",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Machine Learning in Healthcare\",\n  \"platform\": \"blog\",\n  \"tone\": \"authoritative\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate"]
            },
            "description": "Generate blog post with 300-500 words. Requires authentication."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Async Generation (Protected)",
      "item": [
        {
          "name": "Start Async Generation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 202) {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    pm.environment.set('taskId', jsonData.taskId);",
                  "    ",
                  "    console.log('‚úÖ Async task started!');",
                  "    console.log('üìã Task ID:', jsonData.taskId);",
                  "    console.log('üîó Status URL:', jsonData.statusUrl);",
                  "    console.log('üîó Result URL:', jsonData.resultUrl);",
                  "    ",
                  "    pm.test('Async task created', function () {",
                  "        pm.response.to.have.status(202);",
                  "        pm.expect(jsonData).to.have.property('taskId');",
                  "        pm.expect(jsonData.status).to.eql('PENDING');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    console.log('‚ùå Unauthorized - please login first');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"{{testTopic}}\",\n  \"platform\": \"{{testPlatform}}\",\n  \"tone\": \"{{testTone}}\",\n  \"imageCount\": {{testImageCount}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/async",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "async"]
            },
            "description": "Start async generation. Returns immediately with task ID. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Check Task Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    console.log('üìä Task Status:', jsonData.status);",
                  "    console.log('üïê Created:', jsonData.createdAt);",
                  "    ",
                  "    if (jsonData.status === 'COMPLETED') {",
                  "        console.log('‚úÖ Task completed! Ready to get result.');",
                  "        console.log('üïë Completed at:', jsonData.completedAt);",
                  "    } else if (jsonData.status === 'FAILED') {",
                  "        console.log('‚ùå Task failed:', jsonData.error);",
                  "    } else {",
                  "        console.log('‚è≥ Still processing...');",
                  "    }",
                  "    ",
                  "    pm.test('Status retrieved', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData.status).to.be.oneOf(['PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED']);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/status/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "status", "{{taskId}}"]
            },
            "description": "Check the status of an async task. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Get Task Result",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    console.log('‚úÖ Result retrieved successfully!');",
                  "    console.log('üìù Topic:', jsonData.topic);",
                  "    console.log('üéØ Research points:', jsonData.research.points.length);",
                  "    console.log('üì± Platform:', jsonData.content.platform);",
                  "    console.log('üñºÔ∏è Images:', jsonData.image.localImageUrls.length);",
                  "    ",
                  "    pm.test('Result complete', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('research');",
                  "        pm.expect(jsonData).to.have.property('content');",
                  "        pm.expect(jsonData).to.have.property('image');",
                  "    });",
                  "} else if (pm.response.code === 400) {",
                  "    console.log('‚è≥ Task not ready yet - still processing');",
                  "} else if (pm.response.code === 404) {",
                  "    console.log('‚ùå Task not found');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate/result/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate", "result", "{{taskId}}"]
            },
            "description": "Get the result of a completed async task. Requires authentication."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Complete Workflows",
      "item": [
        {
          "name": "1. Register & Generate Content",
          "item": [
            {
              "name": "Step 1: Register",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.environment.set('accessToken', jsonData.accessToken);",
                      "pm.environment.set('refreshToken', jsonData.refreshToken);",
                      "console.log('‚úÖ Step 1 complete: User registered and tokens saved');"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.environment.set('workflowEmail', `workflow_${Date.now()}@example.com`);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{workflowEmail}}\",\n  \"name\": \"Workflow\",\n  \"surname\": \"Test\",\n  \"password\": \"WorkflowPass123!\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "auth", "register"]
                }
              },
              "response": []
            },
            {
              "name": "Step 2: Generate Content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    console.log('‚úÖ Step 2 complete: Content generated with authentication');",
                      "} else {",
                      "    console.log('‚ùå Generation failed - check authentication');",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"topic\": \"Test Workflow Content\",\n  \"platform\": \"twitter\",\n  \"tone\": \"casual\",\n  \"imageCount\": 1\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/generate",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "generate"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "2. Async Generation Workflow",
          "item": [
            {
              "name": "Step 1: Start Generation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "pm.environment.set('asyncTaskId', jsonData.taskId);",
                      "console.log('‚úÖ Async task started:', jsonData.taskId);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"topic\": \"Async Workflow Test\",\n  \"platform\": \"linkedin\",\n  \"tone\": \"professional\",\n  \"imageCount\": 1\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/generate/async",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "generate", "async"]
                }
              },
              "response": []
            },
            {
              "name": "Step 2: Poll Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "console.log('üìä Current status:', jsonData.status);",
                      "if (jsonData.status !== 'COMPLETED') {",
                      "    console.log('‚è≥ Run this request again in a few seconds...');",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/generate/status/{{asyncTaskId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "generate", "status", "{{asyncTaskId}}"]
                }
              },
              "response": []
            },
            {
              "name": "Step 3: Get Result",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    console.log('‚úÖ Result retrieved successfully');",
                      "} else {",
                      "    console.log('‚è≥ Task not ready - check status first');",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/generate/result/{{asyncTaskId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "v1", "generate", "result", "{{asyncTaskId}}"]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Health & Monitoring",
      "item": [
        {
          "name": "Health Check (Public)",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "health"]
            },
            "description": "Check service health. This endpoint is public and doesn't require authentication."
          },
          "response": []
        },
        {
          "name": "Actuator Health (Public)",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health"]
            },
            "description": "Spring Boot actuator health endpoint. Public endpoint."
          },
          "response": []
        },
        {
          "name": "Actuator Metrics (Public)",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "metrics"]
            },
            "description": "List available metrics. Public endpoint."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Validation Tests",
      "item": [
        {
          "name": "Invalid Email Format",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"name\": \"Test\",\n  \"surname\": \"User\",\n  \"password\": \"Password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Should return 400 - invalid email format"
          },
          "response": []
        },
        {
          "name": "Short Password",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"name\": \"Test\",\n  \"surname\": \"User\",\n  \"password\": \"short\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Should return 400 - password too short (min 8 chars)"
          },
          "response": []
        },
        {
          "name": "Protected Endpoint Without Auth",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Test\",\n  \"platform\": \"twitter\",\n  \"tone\": \"casual\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate"]
            },
            "description": "Should return 401 - unauthorized (no token)"
          },
          "response": []
        },
        {
          "name": "Invalid Platform",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Test\",\n  \"platform\": \"facebook\",\n  \"tone\": \"casual\",\n  \"imageCount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/generate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "generate"]
            },
            "description": "Should return 400 - invalid platform (requires auth)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('üöÄ Request:', pm.request.method, pm.request.url.toString());",
          "",
          "// Check if access token exists and add to header if not using collection auth",
          "if (pm.environment.get('accessToken') && !pm.request.headers.has('Authorization')) {",
          "    // Token will be added by collection auth settings",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "const responseTime = pm.response.responseTime;",
          "console.log('‚è±Ô∏è Response time:', responseTime + 'ms');",
          "console.log('üìä Status:', pm.response.code, pm.response.status);",
          "",
          "// Handle 401 responses globally",
          "if (pm.response.code === 401) {",
          "    const currentPath = pm.request.url.path.join('/');",
          "    ",
          "    // Don't warn for auth endpoints",
          "    if (!currentPath.includes('auth')) {",
          "        console.log('‚ö†Ô∏è Authentication required or token expired');",
          "        console.log('üí° Try: 1) Login, 2) Refresh token, or 3) Register new user');",
          "    }",
          "}",
          "",
          "// Performance assertions",
          "if (pm.request.url.path.includes('async')) {",
          "    pm.test('Async endpoint responds quickly', function () {",
          "        pm.expect(responseTime).to.be.below(500);",
          "    });",
          "} else if (pm.request.url.path.includes('status') || pm.request.url.path.includes('health')) {",
          "    pm.test('Status endpoint responds quickly', function () {",
          "        pm.expect(responseTime).to.be.below(200);",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string",
      "description": "Base URL for the API"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string",
      "description": "JWT access token (auto-populated after login/register)"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string",
      "description": "JWT refresh token (auto-populated after login/register)"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string",
      "description": "Test email for registration (auto-generated)"
    },
    {
      "key": "testPassword",
      "value": "TestPassword123!",
      "type": "string",
      "description": "Test password for registration"
    },
    {
      "key": "loginEmail",
      "value": "test@example.com",
      "type": "string",
      "description": "Email for login testing"
    },
    {
      "key": "loginPassword",
      "value": "TestPassword123!",
      "type": "string",
      "description": "Password for login testing"
    },
    {
      "key": "taskId",
      "value": "",
      "type": "string",
      "description": "Current async task ID"
    },
    {
      "key": "testTopic",
      "value": "Artificial Intelligence",
      "type": "string",
      "description": "Test topic for content generation"
    },
    {
      "key": "testPlatform",
      "value": "twitter",
      "type": "string",
      "description": "Test platform (twitter, linkedin, instagram, blog)"
    },
    {
      "key": "testTone",
      "value": "professional",
      "type": "string",
      "description": "Test tone (professional, casual, friendly, authoritative, technical)"
    },
    {
      "key": "testImageCount",
      "value": "1",
      "type": "number",
      "description": "Number of images to generate (0-4)"
    }
  ]
}